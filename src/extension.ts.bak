import { ExtensionContext, commands, window, workspace, languages } from 'vscode';
import { OllamaService } from './ollamaService';
import { OllamaCompletionProvider } from './inlineCompletionProvider';
import { ChatPanel } from './chatPanel';

export function activate(context: ExtensionContext) {
  const ollama = new OllamaService();
  const statusBar = window.createStatusBarItem();
  
  // Mise à jour de la status bar
  const updateStatusBar = () => {
    statusBar.text = `$(code) Ollama: ${workspace.getConfiguration('ollama').get('defaultModel')}`;
    statusBar.show();
  };
  updateStatusBar();

  // Enregistrement de la complétion inline
//  const provider = new OllamaCompletionProvider(ollama);
//  context.subscriptions.push(
//    workspace.registerInlineCompletionItemProvider('*', provider)
//  );

context.subscriptions.push(
  languages.registerInlineCompletionItemProvider('*', provider)
);

  // Commandes
  context.subscriptions.push(
    commands.registerCommand('ollama.generateCode', async () => {
      const prompt = await window.showInputBox({ prompt: 'Enter your code prompt' });
      if (!prompt) return;

      try {
        const code = await ollama.generateCompletion(
          prompt,
          workspace.getConfiguration('ollama').get('defaultModel')
        );
        
        const editor = window.activeTextEditor;
        if (editor) {
          await editor.edit(editBuilder => {
            editBuilder.insert(editor.selection.active, code);
          });
        }
      } catch (error) {
        window.showErrorMessage(`Ollama Error: ${error}`);
      }
    }),

    commands.registerCommand('ollama.openChat', () => {
      new ChatPanel(ollama);
    })
  );

  // Surveiller les changements de configuration
  workspace.onDidChangeConfiguration(e => {
    if (e.affectsConfiguration('ollama')) {
      updateStatusBar();
    }
  });
}

export function deactivate() {}
